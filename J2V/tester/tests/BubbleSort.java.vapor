const vmt_BBS
  :BBS.Start
  :BBS.Sort
  :BBS.Print
  :BBS.Init


func BBS.Print(this  )
  j = 0
  if5_start:
  BBS.Print.0 = [this+8]
  t.33 = LtS(j BBS.Print.0)
  if0 t.33 goto :if5_end
    t.35 = MulS(4 j)
    t.35 = Add(4 t.35)
  BBS.Print.1 = [this+4]
    t.35 = Add(BBS.Print.1 t.35)
    t.34 = [t.35]
    PrintIntS(t.34)
    t.36 = Add(j 1)
    j = t.36
    goto :if5_start
  if5_end:
  ret 0


func BBS.Sort(this  )
  BBS.Sort.0 = [this+8]
  t.11 = Sub(BBS.Sort.0 1)
  i = t.11
  t.12 = Sub(0 1)
  aux02 = t.12
  if4_start:
  t.13 = LtS(aux02 i)
  if0 t.13 goto :if4_end
    j = 1
    if3_start:
    t.14 = Add(i 1)
    t.15 = LtS(j t.14)
    if0 t.15 goto :if3_end
      t.16 = Sub(j 1)
      aux07 = t.16
      t.18 = MulS(4 aux07)
      t.18 = Add(4 t.18)
  BBS.Sort.1 = [this+4]
      t.18 = Add(BBS.Sort.1 t.18)
      t.17 = [t.18]
      aux04 = t.17
      t.20 = MulS(4 j)
      t.20 = Add(4 t.20)
  BBS.Sort.2 = [this+4]
      t.20 = Add(BBS.Sort.2 t.20)
      t.19 = [t.20]
      aux05 = t.19
      t.21 = LtS(aux05 aux04)
      if0 t.21 goto :if2_else
        t.22 = Sub(j 1)
        aux06 = t.22
        t.24 = MulS(4 aux06)
        t.24 = Add(4 t.24)
  BBS.Sort.3 = [this+4]
        t.24 = Add(BBS.Sort.3 t.24)
        t.23 = [t.24]
        t = t.23
        t.26 = MulS(4 j)
        t.26 = Add(4 t.26)
  BBS.Sort.4 = [this+4]
        t.26 = Add(BBS.Sort.4 t.26)
        t.25 = [t.26]
        t.28 = MulS(4 aux06)
        t.28 = Add(4 t.28)
  BBS.Sort.5 = [this+4]
        t.27 = Add(BBS.Sort.5 t.28)
        [t.27] = t.25
        t.30 = MulS(4 j)
        t.30 = Add(4 t.30)
  BBS.Sort.6 = [this+4]
        t.29 = Add(BBS.Sort.6 t.30)
        [t.29] = t
      goto :if2_end
      if2_else:
        nt = 0
      if2_end:
      t.31 = Add(j 1)
      j = t.31
      goto :if3_start
    if3_end:
    t.32 = Sub(i 1)
    i = t.32
    goto :if4_start
  if4_end:
  ret 0


func AbstractAlloc(len)
  size = MulS(len 4)
  size = Add(size 4)
  arr = HeapAllocZ(size)
  [arr] = len
  ret arr


func BBS.Start(this sz )
  t.3 = [this]
  t.3 = [t.3+12]
  t.4 = call t.3(this sz)
  aux01 = t.4
  t.5 = [this]
  t.5 = [t.5+8]
  t.6 = call t.5(this )
  aux01 = t.6
  PrintIntS(99999)
  t.7 = [this]
  t.7 = [t.7+4]
  t.8 = call t.7(this )
  aux01 = t.8
  t.9 = [this]
  t.9 = [t.9+8]
  t.10 = call t.9(this )
  aux01 = t.10
  ret 0


func Main()
  t.0 = HeapAllocZ(12)
  [t.0] = :vmt_BBS
  if t.0 goto :null_if1
    Error("null pointer")
  null_if1:
  t.1 = [t.0]
  t.1 = [t.1+0]
  t.2 = call t.1(t.0 10)
  PrintIntS(t.2)
  ret


func BBS.Init(this sz )
  BBS.Init.0 = sz
  [this+8] = BBS.Init.0
  BBS.Init.1 = call :AbstractAlloc(sz)
  [this+4] = BBS.Init.1
  BBS.Init.2 = [this+4]
  [BBS.Init.2+4] = 20
  BBS.Init.3 = [this+4]
  [BBS.Init.3+8] = 7
  BBS.Init.4 = [this+4]
  [BBS.Init.4+12] = 12
  BBS.Init.5 = [this+4]
  [BBS.Init.5+16] = 18
  BBS.Init.6 = [this+4]
  [BBS.Init.6+20] = 2
  BBS.Init.7 = [this+4]
  [BBS.Init.7+24] = 11
  BBS.Init.8 = [this+4]
  [BBS.Init.8+28] = 6
  BBS.Init.9 = [this+4]
  [BBS.Init.9+32] = 9
  BBS.Init.10 = [this+4]
  [BBS.Init.10+36] = 19
  BBS.Init.11 = [this+4]
  [BBS.Init.11+40] = 5
  ret 0



